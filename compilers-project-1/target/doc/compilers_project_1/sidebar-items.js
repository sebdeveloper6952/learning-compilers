initSidebarItems({"constant":[["EPSILON","Global variables the representation of the Epsilon character"]],"enum":[["FAType",""]],"fn":[["depth_first_debug","Depth first traversal, printing the information of each node. Used during development for debugging."],["dfa_simul","Simulates a `Dfa` with the given word."],["e_closure","Epsilon closure. Returns the set of states reachable from some state 's' in 'states' on e-transitions alone."],["f_move","Move function. Returns the set of states to which there is a transition on input symbol 'symbol' from some state 's' in 'states'."],["hashset","Utility function to create hashset from u32 slice."],["is_op","Is the char an operator?"],["is_valid_regex_symbol","Is the char valid in our regular expressions?"],["main",""],["minimize_dfa","Minimizes a DFA."],["nfa_simul","Simulates a `Nfa` with the given word."],["parse_regex","loop through input regex to build the Abstract Syntax Tree for the regex. the algorithm used is the one created by Edsger Dijkstra, Shunting Yard Algorithm. https://en.wikipedia.org/wiki/Shunting-yard_algorithm"],["preprocess_regex","Process the extension operators of regexes:"],["regex_dfa","Constructs a DFA directly from the regular expression."],["regex_insert_concat_op","Insert an explicit concatenation operator ('.') into the regular expression so parsing it is easier."],["subset_construction","Constructs a DFA given a NFA and an alphabet. input: NFA, alphabet. output: DFA."],["thompson_algorithm","Thompson algorithm. input: Abstract Syntax Tree output: NFA"]],"struct":[["Dfa","DFA representation"],["FAFile","Struct to represent a finite automata and serialize it to JSON."],["Nfa","NFA representation"],["Node","AST node representation"]]});